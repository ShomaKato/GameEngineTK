///-------------------------------------------------------------------
//*
//*	@作成日		2017/05/11
//*
//*	@名前		Camera.cpp
//*
//*	@著者		加藤 彰馬
//*
///-------------------------------------------------------------------

// ヘッダファイルのインクルード
#include "DIrectXMath.h"
#include "Camera.h"

// 名前空間
using namespace DirectX;			/* XMConvertToRadians */
using namespace DirectX::SimpleMath;


///////////////////////////////
///		メンバ関数の定義	///
///////////////////////////////
////----------------------------------------------------------------------
////! @関数名：Camera
////!
////! @役割：コンストラクタ
////!
////! @引数：なし
////!
////! @戻り値：存在しない
////----------------------------------------------------------------------
Camera::Camera(int width, int height)
{
	// メンバ変数の初期化（ビュー行列関連）
	m_eyepos = Vector3(0, 0, 0.5f);		/* Vector3を抜かしていたのでエラーしてました */
	m_refpos = Vector3(0, 0, 0);
	m_Upvec = Vector3(0, 1, 0);
	// ビュー行列の生成
	m_view = Matrix::CreateLookAt(m_eyepos, m_refpos, m_Upvec);



	// 視野角の初期化（プロジェクション行列関連）
	m_fovY = XMConvertToRadians(60.0f);	/* DirectXを名前空間しないとダメ。SimpleMathではない */
	m_aspect = (float)width /height;
	m_nearclip = 0.1f;
	m_farclip = 1000.0f;


	// 射影行列の透視投影（生成）
	m_proj = Matrix::CreatePerspectiveFieldOfView(m_fovY, m_aspect, m_nearclip, m_farclip);
}

////----------------------------------------------------------------------
////! @関数名：~Camera
////!
////! @役割：デストラクタ
////!
////! @引数：存在しない
////!
////! @戻り値：存在しない
////----------------------------------------------------------------------
Camera::~Camera()
{
}

////----------------------------------------------------------------------
////! @関数名：Update
////!
////! @役割：カメラの更新処理
////!
////! @引数：なし(void)
////!
////! @戻り値：なし(void)
////----------------------------------------------------------------------
void Camera::Update()
{
	// ビュー行列の生成
	m_view = Matrix::CreateLookAt(m_eyepos, m_refpos, m_Upvec);
	// 射影行列の透視投影（生成）
	m_proj = Matrix::CreatePerspectiveFieldOfView(m_fovY, m_aspect, m_nearclip, m_farclip);

	/* 上記二つ、どちらもUpdateでも処理しないと常についてくるカメラにならない */
}






////----------------------------------------------------------------------
////! @関数名：SetEyepos
////!
////! @役割：視点[eyepos]を設定してセットする
////!
////! @引数：視点(Vector3)
////!
////! @戻り値：なし(void)
////----------------------------------------------------------------------
void Camera::SetEyepos(Vector3 eyepos)
{
	m_eyepos = eyepos;
}

////----------------------------------------------------------------------
////! @関数名：SetRefpos
////!
////! @役割：注視点[refpos]を設定してセットする
////!
////! @引数：注視点(Vector3)
////!
////! @戻り値：なし(void)
////----------------------------------------------------------------------
void Camera::SetRefpos(Vector3 refpos)
{
	m_refpos = refpos;
}

////----------------------------------------------------------------------
////! @関数名：SetUpvec
////!
////! @役割：上方向ベクトル[Upvec]を設定してセットする
////!
////! @引数：上方向ベクトル(Vector3)
////!
////! @戻り値：なし(void)
////----------------------------------------------------------------------
void Camera::SetUpvec(Vector3 Upvec)
{
	m_Upvec = Upvec;
}

////----------------------------------------------------------------------
////! @関数名：GetViewMatrix
////!
////! @役割：ビュー行列を取得する
////!
////! @引数：なし(void)
////!
////! @戻り値：ビュー行列(Matrix)
////----------------------------------------------------------------------
const Matrix& Camera::GetView()
{
	return m_view;
}






////----------------------------------------------------------------------
////! @関数名：SetFovY
////!
////! @役割：垂直方向視野を設定してセットする
////!
////! @引数：なし(float)
////!
////! @戻り値：なし(void)
////----------------------------------------------------------------------
void Camera::SetFovY(float fovY)
{
	m_fovY = fovY;
}

////----------------------------------------------------------------------
////! @関数名：SetAspect
////!
////! @役割：画面比率を設定してセットする
////!
////! @引数：なし(float)
////!
////! @戻り値：なし(void)
////----------------------------------------------------------------------
void Camera::SetAspect(float aspect)
{
	m_aspect = aspect;
}

////----------------------------------------------------------------------
////! @関数名：SetNearclip
////!
////! @役割：ニアクリップを設定してセットする
////!
////! @引数：なし(float)
////!
////! @戻り値：なし(void)
////----------------------------------------------------------------------
void Camera::SetNearclip(float nearclip)
{
	m_nearclip = nearclip;
}

////----------------------------------------------------------------------
////! @関数名：SetFarclip
////!
////! @役割：ファークリップを設定してセットする
////!
////! @引数：なし(float)
////!
////! @戻り値：なし(void)
////----------------------------------------------------------------------
void Camera::SetFarclip(float farclip)
{
	m_farclip = farclip;
}

////----------------------------------------------------------------------
////! @関数名：GetProjectionMatrix
////!
////! @役割：射影行列を取得する
////!
////! @引数：なし(void)
////!
////! @戻り値：射影行列(Matrix)
////----------------------------------------------------------------------
const Matrix& Camera::GetProj()
{
	return m_proj;
}
